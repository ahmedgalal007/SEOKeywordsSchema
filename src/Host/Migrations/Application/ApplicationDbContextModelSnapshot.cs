// <auto-generated />
using System;
using Host.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Host.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Thing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisambiguatingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainEntityOfPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PotentialAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SameAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Thing", "Schema");

                    b.HasDiscriminator<string>("TypeName").HasValue("Thing");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.CreativeWork", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.Thing");

                    b.HasDiscriminator().HasValue("CreativeWork");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Organization", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.Thing");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Person", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.Thing");

                    b.Property<string>("AdditionalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AffiliationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FollowsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("award")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("duns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AffiliationId")
                        .IsUnique()
                        .HasFilter("[AffiliationId] IS NOT NULL");

                    b.HasIndex("FollowsId")
                        .IsUnique()
                        .HasFilter("[FollowsId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Place", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.Thing");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Place");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.CreativeWorks.Articles.NewsArticle", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.CreativeWork");

                    b.HasDiscriminator().HasValue("NewsArticle");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.CreativeWorks.Articles.Report", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.CreativeWork");

                    b.HasDiscriminator().HasValue("Report");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.CreativeWorks.Articles.SatiricalArticle", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.Schemas.Things.CreativeWork");

                    b.HasDiscriminator().HasValue("SatiricalArticle");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Thing", b =>
                {
                    b.OwnsOne("Host.Schemas.Properties.SubjectOf", "SubjectOf", b1 =>
                        {
                            b1.Property<Guid>("ThingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("HasValue1")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasValue2")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSingle")
                                .HasColumnType("bit");

                            b1.HasKey("ThingId");

                            b1.ToTable("Subjects", "Schema");

                            b1.WithOwner()
                                .HasForeignKey("ThingId");

                            b1.OwnsOne("System.Collections.Generic.List<FSH.WebApi.Domain.Schemas.Things.CreativeWork>", "Value1", b2 =>
                                {
                                    b2.Property<Guid>("SubjectOfThingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Capacity")
                                        .HasColumnType("int");

                                    b2.HasKey("SubjectOfThingId");

                                    b2.ToTable("Person", "Schema");

                                    b2.WithOwner()
                                        .HasForeignKey("SubjectOfThingId");
                                });

                            b1.OwnsOne("System.Collections.Generic.List<FSH.WebApi.Domain.Schemas.Things.Event>", "Value2", b2 =>
                                {
                                    b2.Property<Guid>("SubjectOfThingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Capacity")
                                        .HasColumnType("int");

                                    b2.HasKey("SubjectOfThingId");

                                    b2.ToTable("Organization", "Schema");

                                    b2.WithOwner()
                                        .HasForeignKey("SubjectOfThingId");
                                });

                            b1.Navigation("Value1")
                                .IsRequired();

                            b1.Navigation("Value2")
                                .IsRequired();
                        });

                    b.Navigation("SubjectOf");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Person", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.Schemas.Things.Organization", "Affiliation")
                        .WithOne()
                        .HasForeignKey("FSH.WebApi.Domain.Schemas.Things.Person", "AffiliationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FSH.WebApi.Domain.Schemas.Things.Person", "Follows")
                        .WithOne()
                        .HasForeignKey("FSH.WebApi.Domain.Schemas.Things.Person", "FollowsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Affiliation");

                    b.Navigation("Follows");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Place", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.Schemas.Things.Person", null)
                        .WithOne("BirthPlace")
                        .HasForeignKey("FSH.WebApi.Domain.Schemas.Things.Place", "PersonId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Schemas.Things.Person", b =>
                {
                    b.Navigation("BirthPlace")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
